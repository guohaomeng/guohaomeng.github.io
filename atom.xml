<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://guohaomeng.github.io</id>
    <title>meng的博客</title>
    <updated>2020-08-09T12:31:16.687Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://guohaomeng.github.io"/>
    <link rel="self" href="https://guohaomeng.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://guohaomeng.github.io/images/avatar.png</logo>
    <icon>https://guohaomeng.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, meng的博客</rights>
    <entry>
        <title type="html"><![CDATA[微机原理课的一道汇编题]]></title>
        <id>https://guohaomeng.github.io/post/wei-ji-yuan-li-ke-de-yi-dao-hui-bian-ti/</id>
        <link href="https://guohaomeng.github.io/post/wei-ji-yuan-li-ke-de-yi-dao-hui-bian-ti/">
        </link>
        <updated>2020-04-18T11:47:53.000Z</updated>
        <summary type="html"><![CDATA[<p>记录下自己写的第一个汇编程序</p>
]]></summary>
        <content type="html"><![CDATA[<p>记录下自己写的第一个汇编程序</p>
<!-- more -->
<h2 id="1题目要求">1.题目要求</h2>
<p>在内存数据段符号地址为SDATA处连续存放了60个无符号字节数据，试统计该60个数中能被13除尽的数的个数（该结果应存于数据段符号地址COUNT处）。要求：写出完整的数据段与代码段。</p>
<h2 id="2代码">2.代码</h2>
<pre><code class="language-asm">DATA    SEGMENT
SDATA   DB  10  DUP (5)
        DB  10  DUP (26)
        DB  20  DUP (13)
        DB  20  DUP (9) ;这里设置了60个数，能被13整除的有30个
COUNT   DB  0
DATA    ENDS

_STACKS SEGMENT STACK
        DW  64  DUP (?)
_STACKS ENDS

CODE    SEGMENT
        ASSUME CS:CODE, DS:DATA, SS:_STACKS, ES:DATA
START:  MOV AX,DATA
        MOV DS,AX
        MOV ES,AX
        MOV AX,_STACKS
        MOV SS,AX       ;初始化各段首地址
        LEA SI,SDATA
        MOV CX,60
        XOR AX,AX       ;ax清零，存放余数和商
        MOV BL,0        ;bl清零，存放个数
        MOV BH,0DH      ;bh存放除数:13
NEXT:   MOV AL,[SI]
        MOV AH,0
        DIV BH          ;AX%BH，余数放入AH，商放入AL
        INC SI          ;使si指向下一个被除数
        CMP AH,0        ;判断余数是否为0
        LOOPNZ NEXT     ;cx不为0且余数不为0时跳转
        CMP CX,0
        JZ  A1          ;cx若为0则结束循环
        INC BL          ;能被整除数+1
        CMP AH,0
        LOOPZ NEXT      ;跳回去继续循环
A1:     MOV COUNT,BL    ;把最终结果写到COUNT处
        HLT
CODE    ENDS
        END START
;OK VERSION
</code></pre>
<h2 id="3仿真结果">3.仿真结果</h2>
<p>程序运行结束后各寄存器状态<br>
<img src="https://guohaomeng.github.io/post-images/1587210905128.jpg" alt="" loading="lazy"><br>
然后是ds段内存区域的状态<br>
<img src="https://guohaomeng.github.io/post-images/1587210939009.jpg" alt="" loading="lazy"><br>
可以看到BL所存放的结果为1EH，转换为十进制刚好为30。也就是说一共有30个数能被13整除，这与我们预设的数据相吻合</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[在Github上发布静态网站]]></title>
        <id>https://guohaomeng.github.io/post/zai-github-shang-fa-bu-jing-tai-wang-zhan/</id>
        <link href="https://guohaomeng.github.io/post/zai-github-shang-fa-bu-jing-tai-wang-zhan/">
        </link>
        <updated>2020-01-28T13:17:25.000Z</updated>
        <summary type="html"><![CDATA[<p>使用GitHub pages发布静态网页</p>
]]></summary>
        <content type="html"><![CDATA[<p>使用GitHub pages发布静态网页</p>
<!-- more -->
<ol>
<li>首先，先新建一个GitHub仓库（右上角头像旁+号-&gt;New repository，并选择初始化README。</li>
</ol>
<figure data-type="image" tabindex="1"><img src="https://guohaomeng.github.io/post-images/1580218022095.jpg" alt="" loading="lazy"></figure>
<ol start="2">
<li>然后我们将这个仓库克隆到本地</li>
</ol>
<figure data-type="image" tabindex="2"><img src="https://guohaomeng.github.io/post-images/1580218595663.jpg" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="3"><img src="https://guohaomeng.github.io/post-images/1580218602535.jpg" alt="" loading="lazy"></figure>
<ol start="3">
<li>之后，将网页文件全部复制到这个文件夹里，注意，一定要将主页命名为index.html并将其放在仓库根目录下。像这样：</li>
</ol>
<figure data-type="image" tabindex="4"><img src="https://guohaomeng.github.io/post-images/1580219120570.jpg" alt="" loading="lazy"></figure>
<ol start="4">
<li>然后提交仓库所有改动,并将代码推送到GitHub</li>
</ol>
<pre><code>git add .

git commit -m &quot;sample code&quot;

git push    //推送到GitHub
</code></pre>
<p>上传完成如图所示：</p>
<figure data-type="image" tabindex="5"><img src="https://guohaomeng.github.io/post-images/1580220378705.jpg" alt="" loading="lazy"></figure>
<ol start="5">
<li>接下来将这个仓库发布为GitHub pages</li>
</ol>
<figure data-type="image" tabindex="6"><img src="https://guohaomeng.github.io/post-images/1580220668038.jpg" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="7"><img src="https://guohaomeng.github.io/post-images/1580220675931.jpg" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="8"><img src="https://guohaomeng.github.io/post-images/1580220771812.jpg" alt="" loading="lazy"></figure>
<ol start="6">
<li>OK啦~ 有问题可以留言呀</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[利用光敏电阻检测光强]]></title>
        <id>https://guohaomeng.github.io/post/li-yong-guang-min-dian-zu-jian-ce-guang-qiang/</id>
        <link href="https://guohaomeng.github.io/post/li-yong-guang-min-dian-zu-jian-ce-guang-qiang/">
        </link>
        <updated>2019-12-08T14:37:47.000Z</updated>
        <summary type="html"><![CDATA[<p>利用光敏电阻检测光强</p>
]]></summary>
        <content type="html"><![CDATA[<p>利用光敏电阻检测光强</p>
<!-- more -->
<h3 id="一原理">一·原理</h3>
<p>光敏电阻元件的特性便是随着光照的增强，其自身的电阻便会逐渐降低。利用这一特性，我们便可以将其与电阻串联，由电阻分压原理可将光的强弱信号转为电阻大小再转为光敏电阻两端电压大小信号，这样就做成了一个简单的光敏传感器。传感器信号经集成运放放大后再用单片机P1.5引脚读取此值，最后再将读取到的电压值用串口通信输出到串口屏上。</p>
<h3 id="二具体电路图如下">二·具体电路图如下</h3>
<p><img src="https://guohaomeng.github.io/post-images/1575816099020.png" alt="" loading="lazy"><br>
该电路中，我们通过msp430的vcc端口供电，电压为3.3V，用10千欧电阻R1与光敏电阻R5串联，由于multisim中没有光敏电阻，我们用100KΩ的滑动变阻器来代替。这样R5两端输出电压便约在0到3.3V之间。由于要求输出信号的范围在0到5V之间，我们再将此信号用集成运放放大（5/3.3）=1.515倍。即</p>
<blockquote>
<p>1+R4/R3=1.515</p>
</blockquote>
<p>R3选取1千欧，则经计算R4选取515欧较为合适。实现了信号放大之后，我们再将放大后的信号用单片机检测出来。由于P1.5引脚读取到的电压模拟量经单片机自身模数转换后被分成1024份，最大检测电压为3.3V。即</p>
<blockquote>
<p>单片机读出的数字量 val = （真实电压值/3.3）*1024</p>
</blockquote>
<p>我们将光敏电阻的高电位一端作为待检测信号连接到P1.5，经简单计算可得单片机读取的数字量转换为真实电压值的表达式：</p>
<blockquote>
<p>真实电压值 =（单片机转换后数字量 val/1024）<em>3.3</em>1.515</p>
</blockquote>
<p>这样即可用单片机检测到真实电压输出值。Msp430单片机具体代码如下：</p>
<pre><code class="language-c++">#include &lt;Arduino.h&gt;

void LCDprintstring(const String &amp;aa ,const String bb) //向usart hmi 串口屏上**文本打印字符串
{
  Serial.print( bb + &quot;.txt=\&quot;&quot; + aa + &quot;\&quot;&quot;);
  Serial.write(0XFF);
  Serial.write(0XFF);
  Serial.write(0XFF);
  delay(500);
}
void LCDprintnum(float &amp;num) //向usart hmi 串口屏上t0文本打印数字
{
  Serial.write(&quot;t0.txt=\&quot;&quot;);
  Serial.print(num);
  Serial.write(&quot;\&quot;&quot;);
  Serial.write(0XFF);
  Serial.write(0XFF);
  Serial.write(0XFF);
}

float val1=0;
void setup()
{
  pinMode(P1_5,INPUT);
  Serial.begin(9600); //设置波特率为9600
}

void loop()
{
  val1=analogRead(P1_5);
  String data1 = &quot;电压读取值/V&quot;;
  LCDprintstring(data1,&quot;t1&quot;);
  delay(250);
  val1 = (val1/1024)*3.3*1.515;
  LCDprintnum(val1);
  delay(250);
}

</code></pre>
<p>接下来接线就完成啦</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[git简易教程（二）]]></title>
        <id>https://guohaomeng.github.io/post/git-jian-yi-jiao-cheng-er/</id>
        <link href="https://guohaomeng.github.io/post/git-jian-yi-jiao-cheng-er/">
        </link>
        <updated>2019-11-06T15:04:49.000Z</updated>
        <summary type="html"><![CDATA[<p>git的初始配置及基本用法</p>
]]></summary>
        <content type="html"><![CDATA[<p>git的初始配置及基本用法</p>
<!-- more -->
<h2 id="一初次运行git前的配置">一·初次运行git前的配置</h2>
<ol>
<li>当安装完 Git 应该做的第一件事就是设置你的用户名称与邮件地址。 这样做很重要，因为每一个 Git 的提交都会使用这些信息，并且它会写入到你的每一次提交中，不可更改：</li>
</ol>
<pre><code>git config --global user.name &quot;你的用户名&quot;
git config --global user.email 你的邮箱@163.com
git config --list   //列出用户信息
</code></pre>
<p>第二行**处填邮箱</p>
<h2 id="二获取git仓库">二·获取git仓库</h2>
<p>两种获取Git项目仓库的方法： 一是在现有项目或目录下导入所有文件到Git中； 二是从一个服务器克隆一个现有的Git仓库。</p>
<ol>
<li>在现有目录中初始化仓库，进入该目录，右键git bash here</li>
</ol>
<pre><code>git init
</code></pre>
<p>该命令将创建一个名为 .git 的子目录，这个子目录含有你初始化的 Git 仓库中所有的必须文件，这些文件是 Git 仓库的骨干。<br>
2. 克隆远程仓库，示例，克隆一下咱们网络信息协会的teamwork测试仓库</p>
<pre><code>git clone https://github.com/wlxxxh/teamwork.git
</code></pre>
<p>该命令执行后会在当前目录下创建一个名为 “teamwork” 的目录，并在在这个目录下初始化一个.git文件夹，从远程仓库拉取所有的数据放在改文件夹，然后从中读取最新版本的文件的拷贝。 如果你进入到这个新建的 teamwork 文件夹，你会发现所有的项目文件已经在里面了，准备就绪等待后续的开发和使用。</p>
<p>克隆地址可以从这里复制<br>
<img src="https://guohaomeng.github.io/post-images/1573053650627.jpg" alt="" loading="lazy"></p>
<h2 id="三git基本操作">三·git基本操作</h2>
<p>上面，我们已经克隆了teamwork仓库到本地了，现在给大家演示一下基本操作，即修改仓库的文件，再将其提交到远程仓库</p>
<pre><code>$ ls    //列出当前目录下的文件
001.txt  README.md
</code></pre>
<p>比如我们将001.txt内加入一行新的文本 test2<br>
回到git命令行</p>
<pre><code>$ git status    //检查仓库状态
On branch master
Your branch is up to date with 'origin/master'.

Changes not staged for commit:
  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)
  (use &quot;git restore &lt;file&gt;...&quot; to discard changes in working directory)
        modified:   001.txt

no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)
</code></pre>
<p>此时会提醒你001.txt文件已经被修改，下面我们将这个修改添加到git暂存区</p>
<pre><code>$ git add 001.txt   //add命令，将修改提交到暂存区
 warning: LF will be replaced by CRLF in 001.txt.
The file will have its original line endings in your working directory
</code></pre>
<p>修改后的文件被放到到暂存区后，我们就可以正式提交它了，运行</p>
<pre><code>$ git commit -m &quot;第二次提交测试&quot; //commit命令，将暂存区文件正式添加到仓库中去，-m 后面跟提交信息，用双引号围起来，提交信息是一定要写的
    [master 4a6fafe] 第二次提交测试
1 file changed, 1 insertion(+)
</code></pre>
<p>每次更改都要先执行add再执行commit</p>
<pre><code>git add .   //将当前目录下所有更改都提交到暂存区
git commit -a -m &quot;提交信息&quot;     //其实如果你觉得 git add 提交缓存的流程太过繁琐，Git 也允许你用 -a 选项跳过这一步。
</code></pre>
<p>如果此时我们再检查一下仓库状态</p>
<pre><code>$ git status
On branch master
Your branch is ahead of 'origin/master' by 1 commit.
  (use &quot;git push&quot; to publish your local commits)

nothing to commit, working tree clean
</code></pre>
<p>他就会提示现在工作目录是干净的，无需提交了<br>
下面我们将我们所做的更改推送到远程仓库里去，运行</p>
<pre><code>$ git push  //push命令，将改动后的代码推送到远程仓库里
Enumerating objects: 5, done.
Counting objects: 100% (5/5), done.
Delta compression using up to 8 threads
Compressing objects: 100% (2/2), done.
Writing objects: 100% (3/3), 309 bytes | 309.00 KiB/s, done.
Total 3 (delta 0), reused 0 (delta 0)
To https://github.com/wlxxxh/teamwork.git
   d80cde2..4a6fafe  master -&gt; master
</code></pre>
<p>现在我们去GitHub远程仓库去看一下，看这个仓库是否已经被更改了<br>
<img src="https://guohaomeng.github.io/post-images/1573133685551.jpg" alt="" loading="lazy"><br>
果然，成功了，第二行出现了test2<br>
好了，最基本的git操作就是这样了，关于git的更多用法，大家可以参考这两处哦</p>
<ol>
<li><a href="https://blog.csdn.net/daily886/article/details/80140720">https://blog.csdn.net/daily886/article/details/80140720</a></li>
<li><a href="https://www.runoob.com/git/git-basic-operations.html">https://www.runoob.com/git/git-basic-operations.html</a></li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[git简易教程（一）]]></title>
        <id>https://guohaomeng.github.io/post/git-jian-yi-jiao-cheng/</id>
        <link href="https://guohaomeng.github.io/post/git-jian-yi-jiao-cheng/">
        </link>
        <updated>2019-11-06T09:54:50.000Z</updated>
        <summary type="html"><![CDATA[<p>包括GitHub的注册以及git的安装</p>
]]></summary>
        <content type="html"><![CDATA[<p>包括GitHub的注册以及git的安装</p>
<!-- more -->
<p><span style="color:red;">先放上网上大神的git安装教程镇楼：<br>
<a href="https://blog.csdn.net/u013295518/article/details/78746007">https://blog.csdn.net/u013295518/article/details/78746007</a><br>
</span></p>
<h2 id="一github的注册">一·GitHub的注册</h2>
<p>首先，进入<a href="https://github.com/">GitHub的官网</a></p>
<figure data-type="image" tabindex="1"><img src="https://guohaomeng.github.io/post-images/1573034456678.jpg" alt="" loading="lazy"></figure>
<p>直接填写用户名、邮箱、密码就行了</p>
<p>期间要验证一下邮箱，邮箱里点击后跳转登陆就行了<br>
<img src="https://guohaomeng.github.io/post-images/1573036068386.jpg" alt="" loading="lazy"><br>
恭喜！现在注册完了，你现在已经正式成为GitHub的一员了。<br>
<img src="https://guohaomeng.github.io/post-images/1573036017274.jpg" alt="" loading="lazy"></p>
<h2 id="二git的安装">二·git的安装</h2>
<ol>
<li>前往git官网下载git <a href="https://git-scm.com/">点击前往</a></li>
<li>除了这个选项，我选Nano，用着简单，对小白友好哎<img src="https://guohaomeng.github.io/post-images/1573051914315.png" alt="" loading="lazy"></li>
<li>其他的一路默认即可(●ˇ∀ˇ●)</li>
<li><img src="https://guohaomeng.github.io/post-images/1573051499964.jpg" alt="" loading="lazy"></li>
<li><img src="https://guohaomeng.github.io/post-images/1573051529659.png" alt="" loading="lazy"></li>
<li><img src="https://guohaomeng.github.io/post-images/1573051540583.png" alt="" loading="lazy"></li>
<li><img src="https://guohaomeng.github.io/post-images/1573051553207.png" alt="" loading="lazy"></li>
<li><img src="https://guohaomeng.github.io/post-images/1573051605498.png" alt="" loading="lazy"></li>
<li><img src="https://guohaomeng.github.io/post-images/1573051615913.png" alt="" loading="lazy"></li>
<li><img src="https://guohaomeng.github.io/post-images/1573051632465.png" alt="" loading="lazy"></li>
<li>安装完成啦！<br>
<img src="https://guohaomeng.github.io/post-images/1573051646600.png" alt="" loading="lazy"></li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于如何在gredia中为网页引入“看板娘”]]></title>
        <id>https://guohaomeng.github.io/post/guan-yu-ru-he-zai-gredia-zhong-wei-wang-ye-yin-ru-kan-ban-niang/</id>
        <link href="https://guohaomeng.github.io/post/guan-yu-ru-he-zai-gredia-zhong-wei-wang-ye-yin-ru-kan-ban-niang/">
        </link>
        <updated>2019-10-02T12:10:46.000Z</updated>
        <summary type="html"><![CDATA[<p>介绍下引入看板娘的最简单的方法，但注意只能引入不能定制，相当于把别人写好的看板娘拿来放到自己网页上。能定制的以后我找时间再发~</p>
]]></summary>
        <content type="html"><![CDATA[<p>介绍下引入看板娘的最简单的方法，但注意只能引入不能定制，相当于把别人写好的看板娘拿来放到自己网页上。能定制的以后我找时间再发~</p>
<!-- more -->
<h1 id="更新">更新</h1>
<p>2018年10月31日，由 fghrsh 提供的原 API 停用，请更新至新地址。参考文章：<br>
https://www.fghrsh.net/post/170.html</p>
<p>2020年1月1日起，该项目不再依赖于 jQuery。<br>
最新配置方法请见  <a href="https://github.com/stevenjoezhang/live2d-widget">https://github.com/stevenjoezhang/live2d-widget</a></p>
<h1 id="一-代码准备">一、代码准备</h1>
<pre><code>&lt;script src=&quot;https://cdn.jsdelivr.net/npm/jquery/dist/jquery.min.js&quot;&gt;&lt;/script&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/font-awesome/css/font-awesome.min.css&quot;&gt;
</code></pre>
<p>这两个是live2d看板娘所需的依赖，一个是jQuery，另一个是fontawesome。gridea这俩好像都没有，我们稍后把它引入。</p>
<pre><code>&lt;script src=&quot;https://cdn.jsdelivr.net/gh/stevenjoezhang/live2d-widget/autoload.js&quot;&gt;&lt;/script&gt;
</code></pre>
<p>autoload.js--自动加载看板娘</p>
<h1 id="二-使用">二、使用</h1>
<p>由于gridea的静态页面都是有对应主题里的模板文件在生成，后同步到GitHub上去的，每次点击同步便会重新生成所有文章页面依次，因此我们应该直接修改模板文件。<br>
进入gridea目录，一般在文档-Gridea文件夹，依次themes-simple-templates-_blocks,找到sidebar.ejs与head.ejs这俩模板文件，在head.ejs中head标签中加入前两行代码<br>
<img src="https://guohaomeng.github.io/post-images/1570021648543.jpg" alt="" loading="lazy"><br>
在sidebar.ejs中加入第三行代码<br>
<img src="https://guohaomeng.github.io/post-images/1570021801167.jpg" alt="" loading="lazy"><br>
保存一下。再打开gridea，点击同步，用新的模板生成一遍文章，并同步到GitHub。<br>
打开浏览器，访问下博客，好了，看板娘出现在了左下角。<br>
<img src="https://guohaomeng.github.io/post-images/1570022350759.jpg" alt="" loading="lazy"></p>
<h1 id="三-over">三、over</h1>
<p>有问题请留言哦~</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[用VScode写c/c++]]></title>
        <id>https://guohaomeng.github.io/post/yong-vscode-xie-cc/</id>
        <link href="https://guohaomeng.github.io/post/yong-vscode-xie-cc/">
        </link>
        <updated>2019-08-18T09:04:53.000Z</updated>
        <summary type="html"><![CDATA[<p>本篇文章主要介绍vscode下c/c++的配置，基本原理可以理解为用一个文本编辑器（vscode）+一个编译器（c/c++编译器）组成开发环境，喜欢vscode界面的不要错过。</p>
]]></summary>
        <content type="html"><![CDATA[<p>本篇文章主要介绍vscode下c/c++的配置，基本原理可以理解为用一个文本编辑器（vscode）+一个编译器（c/c++编译器）组成开发环境，喜欢vscode界面的不要错过。</p>
<!-- more -->
<h2 id="第一步下载并安装编译器">第一步，下载并安装编译器</h2>
<p>1.首先，我们去网上下载c/c++编译器 MinGw -64</p>
<p><a href="https://sourceforge.net/projects/mingw-w64/files/">下载地址：https://sourceforge.net/projects/mingw-w64/files/</a></p>
<p>鉴于国内的网络环境，不建议下载在线安装器安装编译器（有可能装不上），这里我们直接下载完整版压缩包，选择最新版本8.1.0中的x86_64-win32-seh(64位系统，开发windows应用程序），单击进行下载。</p>
<p><img src="https://guohaomeng.github.io/post-images/1566121695931.jpg" alt="" loading="lazy"><br>
2.下载完成之后可以解压到任意位置。<img src="https://guohaomeng.github.io/post-images/1566121721257.jpg" alt="" loading="lazy"><br>
3.添加环境变量。依次开始----设置----系统----关于----系统信息----高级系统设置----环境变量。选中系统变量中的path变量，编辑，新建，填入编译器bin文件夹的路径。OK！<br>
<img src="https://guohaomeng.github.io/post-images/1566125266305.jpg" alt="" loading="lazy"><br>
<img src="https://guohaomeng.github.io/post-images/1566125276247.jpg" alt="" loading="lazy"><br>
4.接下来看看是否成功安装了编译器 win+R  填入cmd，运行。键入命令g++ -v，如果出现一大堆东西，就代表安装成功了。<br>
<img src="https://guohaomeng.github.io/post-images/1566122749850.jpg" alt="" loading="lazy"></p>
<h2 id="第二部配置vscode">第二部，配置vscode</h2>
<p>1.安装c++扩展。在vscode扩展商店中搜索并安装c/c++，Code Runner这两款扩展。重启vscode使扩展生效。</p>
<p>2.在磁盘某一位置（比如桌面）新建一个文件夹（比如my code)用于存放你将来的c/c++源程序文件。在vscode中单击 文件--打开文件夹，打开刚建好的文件夹。新建一个文件，如001.cpp，写下如下代码。</p>
<pre><code>#include &lt;iostream&gt;
using namespace std;
int main()
{
    cout &lt;&lt; &quot;hello,world&quot; &lt;&lt; endl;
		int n;
		cin&gt;&gt;n;
    return 0;
}
</code></pre>
<p>3.按F5编译，这时会提醒你配置c/c++编译器，总共需要配置lanuch.json及task.json两个配置文件。配置过程如下图<br>
<img src="https://guohaomeng.github.io/post-images/1566124088049.jpg" alt="" loading="lazy"><br>
<img src="https://guohaomeng.github.io/post-images/1566124096108.jpg" alt="" loading="lazy"><br>
<img src="https://guohaomeng.github.io/post-images/1566124102343.jpg" alt="" loading="lazy"><br>
4.CTRL+s保存，此时再回到001.cpp文件，再按F5，去配置任务文件<br>
<img src="https://guohaomeng.github.io/post-images/1566124345036.jpg" alt="" loading="lazy"><br>
<img src="https://guohaomeng.github.io/post-images/1566124353610.jpg" alt="" loading="lazy"><br>
前面配置好编译器后，这里就不用多task.json文件做任何改动。CTRL+S保存一下<br>
5.再度切回001.cpp，按下F5（编译+运行）；<br>
<img src="https://guohaomeng.github.io/post-images/1566124773897.jpg" alt="" loading="lazy"><br>
弹出小黑窗，大功告成！</p>
<h2 id="最后">最后</h2>
<p>告诉大家一个命令行里手动编译cpp/c文件的命令，比如编译上面的那个001.cpp</p>
<pre><code>cd C:\Users\meng\Desktop\my code    //首先切换到该文件目录下
g++ 001.cpp -o 001          //-o是重命名，g++后跟源文件名，C语言的源文件也可以用g++命令编译
./001.exe                            //运行生成的可执行文件
</code></pre>
<p>如图：<br>
<img src="https://guohaomeng.github.io/post-images/1566126298549.jpg" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[用vscode写网页----基础安装篇]]></title>
        <id>https://guohaomeng.github.io/post/yong-vscode-xie-wang-ye-ji-chu-an-zhuang-pian/</id>
        <link href="https://guohaomeng.github.io/post/yong-vscode-xie-wang-ye-ji-chu-an-zhuang-pian/">
        </link>
        <updated>2019-08-10T11:14:48.000Z</updated>
        <summary type="html"><![CDATA[<p>在前端开发中，有一个非常好用的工具，Visual Studio Code，简称VS code。今天就给大家简单介绍下它的使用方法</p>
]]></summary>
        <content type="html"><![CDATA[<p>在前端开发中，有一个非常好用的工具，Visual Studio Code，简称VS code。今天就给大家简单介绍下它的使用方法</p>
 <!-- more --> 
<h2 id="1为什么用vscode">1.为什么用vscode？</h2>
<p>当然是vscode有着数不完的优点呀</p>
<ul>
<li>开源，免费；</li>
<li>自定义配置</li>
<li>集成git</li>
<li>智能提示强大</li>
<li>支持各种文件格式（html/jade/css/less/sass/xml）</li>
<li>调试功能强大</li>
<li>各种方便的快捷键</li>
<li>强大的插件扩展<br>
对前端这么好，没理由不用啊<br>
vscode官网：<a href="https://code.visualstudio.com/">点击前往</a></li>
</ul>
<h2 id="2下载安装vscode并进行开发前的简单配置">2.下载安装vscode，并进行开发前的简单配置</h2>
<p>来到vscode官网，点击下载<br>
<img src="https://guohaomeng.github.io/post-images/1565442330218.jpg" alt="" loading="lazy"><br>
打开下载好的安装程序，如图所示操作<br>
<img src="https://guohaomeng.github.io/post-images/1565442410159.jpg" alt="" loading="lazy"><br>
装好后打开，你会发现界面全是英文。别紧张，接下来装个简体中文插件就好了<br>
点击侧边第五个图标（扩展按钮）如图<br>
<img src="https://guohaomeng.github.io/post-images/1565442545655.jpg" alt="" loading="lazy"><br>
搜索Chinese<br>
<img src="https://guohaomeng.github.io/post-images/1565442571940.jpg" alt="" loading="lazy"><br>
就是第一个插件了，点击安装就好了。<br>
安装完重启VScode，变成中文了。<br>
<img src="https://guohaomeng.github.io/post-images/1565442671280.jpg" alt="" loading="lazy"><br>
为了确保我们vscode在写HTML代码时用起来更舒适，除了简体中文插件，推荐同时安装以下几个插件（也是搜索安装）：</p>
<ol>
<li>One Dark Pro      深受程序员欢迎的且很漂亮的一款主题插件</li>
<li>open in browser  安装后可通过ALT+B 组合快捷键方便的在默认浏览器中打开当前正在编辑的网页，可通过ALT+shift +B 在其他浏览器中打开当前网页</li>
<li>Preview on web Server    这个也很厉害，大家看图就明白了（按CTRL+shift+V打开）<img src="https://guohaomeng.github.io/post-images/1565443562731.jpg" alt="" loading="lazy"></li>
<li>vscode icons   vscode上的文件图标库。</li>
</ol>
<h2 id="3正式开始写代码喽">3.正式开始写代码喽</h2>
<p>首先，在你硬盘某个位置建立一个文件夹，作为你以后各种网页代码的存放地。比如在e盘新建个名为“网页设计”的文件夹。打开vscode，左上角 依次 文件---打开文件夹，在弹出的窗口中选中新建好的文件夹，点击打开。<br>
<img src="https://guohaomeng.github.io/post-images/1565444180439.jpg" alt="" loading="lazy"><br>
新建一个名为index.html的文件，写个hello，world试试，这里有个小技巧，英文输入状态下打出感叹号，再按TAB键，可以自动生成最基本的网页结构。如下视频所示<br>
<video width="100%" height="" controls="controls" autoplay="autoplay"><br>
<source src="../../otherfiles/video/video3.mp4" type="video/mp4" /><br>
看到这句话说明你的浏览器不支持HTML5的video标签<br>
</video><br>
写上hello，world！<br>
<img src="https://guohaomeng.github.io/post-images/1565445716854.jpg" alt="" loading="lazy"><br>
好了，大功告成！</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[低配版音频可视化（c++版）]]></title>
        <id>https://guohaomeng.github.io/post/di-pei-ban-yin-pin-ke-shi-hua-cban/</id>
        <link href="https://guohaomeng.github.io/post/di-pei-ban-yin-pin-ke-shi-hua-cban/">
        </link>
        <updated>2019-07-21T11:49:16.000Z</updated>
        <summary type="html"><![CDATA[<p>在命令行里一行行打出wav音频文件的时域波形图</p>
]]></summary>
        <content type="html"><![CDATA[<p>在命令行里一行行打出wav音频文件的时域波形图</p>
<!-- more -->
<p>这么做可以用来分析某段音频的振幅，以便据此分析出该声音的种类及特性<br>
运行结果类似下面这张图<br>
<img src="https://guohaomeng.github.io/post-images/1563710493400.jpg" alt="" loading="lazy"><br>
具体代码如下：</p>
<pre><code>//
//  test.cpp
//  PCM3.0    解码效率低 卡顿十分严重
//  绘制时域波形图，星星数量代表值的大小。
//

#include &lt;iostream&gt;
#include &lt;fstream&gt;
#include &lt;iomanip&gt;
#include &lt;windows.h&gt;

using namespace std;

struct wav_struct
{
    unsigned long file_size;       //文件大小
    unsigned short channel;        //通道数
    unsigned long frequency;       //采样频率
    unsigned long Bps;             //Byte率
    unsigned short sample_num_bit; //一个样本的位数
    unsigned long data_size;       //数据大小
    unsigned char *data;           //音频数据
};

int printstar2(double p1)
{
    int p = p1;
    if (p &lt; 0 &amp;&amp; p &gt; -50)
    {
        for (int i = 0; i &lt; (50 + p); i++)
        {
            cout &lt;&lt; &quot; &quot;;
        }
        for (int i = 0; i &lt; (-p); i++)
        {
            cout &lt;&lt; &quot;*&quot;;
        }
        cout &lt;&lt; endl;
    }
    else if (p == 0)
    {
        for (int i = 0; i &lt; 50; i++)
        {
            cout &lt;&lt; &quot; &quot;;
        }

        cout &lt;&lt; &quot;|&quot;;
        cout &lt;&lt; endl;
    }
    else if (p &gt; 0)
    {
        for (int i = 0; i &lt;= 50; i++)
        {
            cout &lt;&lt; &quot; &quot;;
        }
        for (int i = 0; i &lt; p; i++)
        {
            cout &lt;&lt; &quot;*&quot;;
        }
        cout &lt;&lt; endl;
    }
    else
        cout &lt;&lt; p &lt;&lt; endl;
}

int main(int argc, char **argv)
{
    fstream fs;
    wav_struct WAV;

    fs.open(&quot;./Alarm02.wav&quot;, ios::binary | ios::in); //要分析的音频文件路径，这里是源程序目录下的dogbarks.wav文件

    fs.seekg(0, ios::end); //用c++常用方法获得文件大小
    WAV.file_size = fs.tellg();

    fs.seekg(0x14);
    fs.read((char *)&amp;WAV.channel, sizeof(WAV.channel));

    fs.seekg(0x18);
    fs.read((char *)&amp;WAV.frequency, sizeof(WAV.frequency));

    fs.seekg(0x1c);
    fs.read((char *)&amp;WAV.Bps, sizeof(WAV.Bps));

    fs.seekg(0x22);
    fs.read((char *)&amp;WAV.sample_num_bit, sizeof(WAV.sample_num_bit));

    fs.seekg(0x28);
    fs.read((char *)&amp;WAV.data_size, sizeof(WAV.data_size));

    WAV.data = new unsigned char[WAV.data_size];

    fs.seekg(0x2c);
    fs.read((char *)WAV.data, sizeof(char) * WAV.data_size);

    int m = 0;
    for (unsigned long i = 0; i &lt; WAV.data_size; i = i + 400) //可调节打印行数
    {
        //右边为大端
        unsigned long data_low = WAV.data[i];
        unsigned long data_high = WAV.data[i + 1];
        double data_true = data_high * 256 + data_low;
        long data_complement = 0;
        //取大端的最高位（符号位）
        int my_sign = (int)(data_high / 128);

        if (my_sign == 1)
        {
            data_complement = data_true - 65536;
        }
        else
        {
            data_complement = data_true;
        }

        setprecision(4);
        double float_data = (double)(data_complement / (double)32768);
        double starnumber1 = float_data * 100;
        printstar2(starnumber1);
        //printf(&quot;%f &quot;, float_data);
        Sleep(10); //调节屏幕滚动速度
        m++;
    }
    fs.close();
    cout &lt;&lt; &quot;文件大小为  ：&quot; &lt;&lt; WAV.file_size &lt;&lt; endl;
    cout &lt;&lt; &quot;音频通道数  ：&quot; &lt;&lt; WAV.channel &lt;&lt; endl;
    cout &lt;&lt; &quot;采样频率    ：&quot; &lt;&lt; WAV.frequency &lt;&lt; endl;
    cout &lt;&lt; &quot;Byte率      ：&quot; &lt;&lt; WAV.Bps &lt;&lt; endl;
    cout &lt;&lt; &quot;样本位数    ：&quot; &lt;&lt; WAV.sample_num_bit &lt;&lt; endl;
    cout &lt;&lt; &quot;音频数据大小：&quot; &lt;&lt; WAV.data_size &lt;&lt; endl;
    cout &lt;&lt; &quot;总计打印行数：&quot; &lt;&lt; m &lt;&lt; endl;

    delete[] WAV.data;
    int n;
    cout &lt;&lt; &quot;出现的数字代表星星的数量，输入任意值结束程序&quot;;
    cin &gt;&gt; n;
}
</code></pre>
<p>源程序及测试文件：<a href="../../otherfiles/audiotest.zip">点此下载</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[试一试视频]]></title>
        <id>https://guohaomeng.github.io/post/shi-yi-shi-shi-pin/</id>
        <link href="https://guohaomeng.github.io/post/shi-yi-shi-shi-pin/">
        </link>
        <updated>2019-06-21T13:54:33.000Z</updated>
        <summary type="html"><![CDATA[<p>看看能不能放上视频（推荐使用chrome浏览器）</p>
]]></summary>
        <content type="html"><![CDATA[<p>看看能不能放上视频（推荐使用chrome浏览器）</p>
 <!-- more --> 
<p>视频大概93MB，1m15s<br>
look！<br>
<br></p>
 <video width="100%" height="" controls="controls" autoplay="autoplay">
		<source src="../../otherfiles/video/video1.mp4" type="video/mp4" />
	看到这句话说明你的浏览器不支持HTML5的video标签
</video>
	底下是这次测试视频用的代码
	<br>
<p><img src="https://guohaomeng.github.io/post-images/1561181015756.jpg" alt="" loading="lazy"><br>
<br><br>
分割线</p>
<hr>
<p><img src="https://guohaomeng.github.io/post-images/1561367139373.png" alt="" loading="lazy"><br>
<br><br>
视频中的转场：<a href="../../otherfiles/zhuanchang.zip">10个无缝转场</a></p>
]]></content>
    </entry>
</feed>